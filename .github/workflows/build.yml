name: Build

on:
  workflow_dispatch:
  schedule:
    # run every 24 hours
    - cron: '0 */24 * * *'

permissions:
  contents: write

jobs:
  precheck:
    name: Fetch latest version & Check for existing release
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
      version: ${{ steps.setver.outputs.version }}
      title: ${{ steps.setver.outputs.title }}
      changelog: ${{ steps.setver.outputs.changelog }}
    steps:
      - name: Get latest Aseprite release info
        id: setver
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_info=$(gh release view --repo aseprite/aseprite --json tagName,name,body)
          TAG=$(echo "$release_info" | jq -r .tagName)
          VER=${TAG#v}
          TITLE=$(echo "$release_info" | jq -r .name)
          CHANGELOG=$(echo "$release_info" | jq -r .body)
          
          echo "version=$VER" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          
          # Escape newlines for multiline output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Check for existing release in target repo
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ steps.setver.outputs.version }}"
          if gh release view "$TAG" --repo USLTD/aseprite-builds >/dev/null 2>&1; then
            echo "Release $TAG already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release $TAG does not exist. Proceeding."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Aseprite
    runs-on: windows-latest
    needs: precheck
    if: needs.precheck.outputs.exists != 'true'
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      VERSION: ${{ needs.precheck.outputs.version }}
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache sccache directory
        uses: actions/cache@v3
        with:
          path: |
            %USERPROFILE%\.cache\sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-sccache-


      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.8

      - name: Download Aseprite source
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $source_url = gh release view "v${{ env.VERSION }}" --repo aseprite/aseprite --json assets --jq '.assets[] | select(.name | test("Aseprite-v.+-Source.zip$")) | .url'
          if ([string]::IsNullOrEmpty($source_url)) {
            Write-Error "Could not find Aseprite source zip in release assets."
            exit 1
          }
          Invoke-WebRequest -Uri $source_url -OutFile Source.zip

      - name: Unzip Source
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path C:\aseprite -Force | Out-Null
          Expand-Archive -Path "Source.zip" -DestinationPath C:\aseprite -Force

      - name: Download Skia
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          $url = if ("${{ matrix.arch }}" -eq "x64") {
            'https://github.com/aseprite/skia/releases/latest/download/Skia-Windows-Release-x64.zip'
          } else {
            'https://github.com/aseprite/skia/releases/latest/download/Skia-Windows-Release-x86.zip'
          }
          Invoke-WebRequest -Uri $url -OutFile "Skia.zip"

      - name: Unzip Skia
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path C:\deps\skia -Force | Out-Null
          Expand-Archive -Path "Skia.zip" -DestinationPath C:\deps\skia -Force

      - name: Setup MSVC
        if: env.SKIP != 'true'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Configure build
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          $archDir = if ("${{ matrix.arch }}" -eq "x64") { "Release-x64" } else { "Release-x86" }
          Push-Location C:\aseprite
          New-Item -ItemType Directory -Path build -Force | Out-Null
          Set-Location build
          cmake `
            -G Ninja .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR=C:\deps\skia `
            -DSKIA_LIBRARY_DIR=C:\deps\skia\out\$archDir `
            -DSKIA_LIBRARY=C:\deps\skia\out\$archDir\skia.lib `
            -DCMAKE_C_COMPILER_LAUNCHER=sccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache `
            -DCMAKE_C_FLAGS="/FS" `
            -DCMAKE_CXX_FLAGS="/FS"

      - name: Build aseprite
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          Push-Location C:\aseprite\build
          ninja aseprite
          $libcrypto = $null
          if ("${{ matrix.arch }}" -eq "x64") {
            if (Test-Path -Path "C:/Windows/SysWOW64/libcrypto-1_1-x64.dll") {
              $libcrypto = "C:/Windows/SysWOW64.libcrypto-1_1-x64.dll"
            } else {
              if (Test-Path -Path "C:/Windows/System32/libcrypto-1_1-x64.dll") {
                $libcrypto = "C:/Windows/System32/libcrypto-1_1-x64.dll"
              }
            }
          } else {
            if ("${{ matrix.arch }}" -eq "x86") {
              if (Test-Path -Path "C:/Windows/System32/libcrypto-1_1-x64.dll") {
                $libcrypto = "C:/Windows/System32/libcrypto-1_1-x64.dll"
              } else {
                if (Test-Path -Path "C:/Windows/System32/libcrypto-1_1.dll") {
                  $libcrypto = "C:/Windows/System32/libcrypto-1_1.dll"
                }
              }
            }
          }
          if ($libcrypto -ne $null) {
            Copy-Item -Path $libcrypto -Destination "./bin"
          }

      - name: Upload bin directory for release
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-v${{ env.VERSION }}-windows-${{ matrix.arch }}
          path: C:\aseprite\build\bin

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [precheck, build]
    if: needs.precheck.outputs.exists != 'true'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG: ${{ needs.precheck.outputs.changelog }}
        run: |
          gh release create "v${{ needs.precheck.outputs.version }}" \
            -R USLTD/aseprite-builds \
            --title "${{ needs.precheck.outputs.title }}" \
            --notes-file <(echo "$CHANGELOG") \
            artifacts/aseprite-v${{ needs.precheck.outputs.version }}-windows-x64/* \
            artifacts/aseprite-v${{ needs.precheck.outputs.version }}-windows-x86/*
          echo "Release v${{ needs.precheck.outputs.version }} created."
