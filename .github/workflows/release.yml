name: Release

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      run_id:
        description: 'The ID of the "Build" workflow run to release.'
        required: true

permissions:
  actions: read   # To read artifacts from the triggering workflow
  contents: write # To create the GitHub Release

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download artifacts from build workflow
        id: download
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Standard token is fine for downloading from the same repo
          repository: ${{ github.repository }}
          run-id: ${{ github.event.inputs.run_id || github.event.workflow_run.id }}
          path: artifacts

      - name: Get version from artifact directory
        if: steps.download.outcome == 'success'
        id: version
        run: |
          VERSION=$(ls artifacts | grep -oP 'aseprite-v\K[^-]*' | head -n 1)
          
          if [ -z "$VERSION" ]; then
            echo "Could not determine version from downloaded artifacts. No release will be created."
            echo "version_found=false" >> $GITHUB_OUTPUT
          else
            echo "Found version $VERSION to release."
            echo "version_found=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Get Aseprite release info
        if: steps.version.outputs.version_found == 'true'
        id: setver
        env:
          # Use the PAT for this step to query the private repo if needed, though aseprite/aseprite is public
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          release_info=$(gh release view "v${{ steps.version.outputs.version }}" --repo aseprite/aseprite --json name,body)
          TITLE=$(echo "$release_info" | jq -r .name)
          CHANGELOG=$(echo "$release_info" | jq -r .body)
          
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create Release in private repo
        if: steps.version.outputs.version_found == 'true'
        env:
          # IMPORTANT: Use the PAT for authentication to create the release
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}
          CHANGELOG: ${{ steps.setver.outputs.changelog }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          gh release create "v$VERSION" \
            -R USLTD/aseprite-builds \
            --title "${{ steps.setver.outputs.title }}" \
            --notes-file <(echo "$CHANGELOG") \
            artifacts/aseprite-v$VERSION-windows-x64/* \
            artifacts/aseprite-v$VERSION-windows-x86/*
          echo "Release v$VERSION created in USLTD/aseprite-builds."
