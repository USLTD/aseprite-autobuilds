name: Windows Build (Automatic Version)

permissions:
  contents: write

on:
  schedule:
    - cron: '0 0/24 * * *'  # every 24 hours at midnight UTC
  workflow_dispatch:

jobs:
  precheck:
    name: Check for existing release
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
      version: ${{ steps.setver.outputs.version }}
    steps:
      - name: Read version input
        id: setver
        run: |
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

      - name: Query GitHub API for release
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ steps.setver.outputs.version }}"
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG")
          if [ "$code" -eq 200 ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Aseprite
    runs-on: windows-latest
    needs: precheck
    if: needs.precheck.outputs.exists != 'true'
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      VERSION: ${{ needs.precheck.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache sccache directory
        uses: actions/cache@v3
        with:
          path: |
            %USERPROFILE%\.cache\sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-sccache-

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.8

      - name: Get version
        id: version
        shell: pwsh
        run: |
          $latest = Invoke-RestMethod https://api.github.com/repos/aseprite/aseprite/releases/latest
          $ver = $latest.tag_name.TrimStart('v')
          echo "VERSION=$ver" >> $env:GITHUB_ENV

      - name: Download Aseprite source
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/aseprite/aseprite/releases/download/v$env:VERSION/Aseprite-v$env:VERSION-Source.zip" `
            -OutFile Source.zip

      - name: Unzip Source
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path C:\aseprite -Force | Out-Null
          Expand-Archive -Path "Source.zip" -DestinationPath C:\aseprite -Force

      - name: Download Skia
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          $url = if ("${{ matrix.arch }}" -eq "x64") {
            'https://github.com/aseprite/skia/releases/latest/download/Skia-Windows-Release-x64.zip'
          } else {
            'https://github.com/aseprite/skia/releases/latest/download/Skia-Windows-Release-x86.zip'
          }
          Invoke-WebRequest -Uri $url -OutFile "Skia.zip"

      - name: Unzip Skia
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path C:\deps\skia -Force | Out-Null
          Expand-Archive -Path "Skia.zip" -DestinationPath C:\deps\skia -Force

      - name: Setup MSVC
        if: env.SKIP != 'true'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Configure build
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          $archDir = if ("${{ matrix.arch }}" -eq "x64") { "Release-x64" } else { "Release-x86" }
          Push-Location C:\aseprite
          New-Item -ItemType Directory -Path build -Force | Out-Null
          Set-Location build
          cmake `
            -G Ninja .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR=C:\deps\skia `
            -DSKIA_LIBRARY_DIR=C:\deps\skia\out\$archDir `
            -DSKIA_LIBRARY=C:\deps\skia\out\$archDir\skia.lib `
            -DCMAKE_C_COMPILER_LAUNCHER=sccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache `
            -DCMAKE_C_FLAGS="/FS" `
            -DCMAKE_CXX_FLAGS="/FS"

      - name: Build aseprite
        if: env.SKIP != 'true'
        shell: pwsh
        run: |
          Push-Location C:\aseprite\build
          ninja aseprite
          $libcrypto = $null
          if ("${{ matrix.arch }}" -eq "x64") {
            if (Test-Path -Path "C:/Windows/SysWOW64/libcrypto-1_1-x64.dll") {
              $libcrypto = "C:/Windows/SysWOW64.libcrypto-1_1-x64.dll"
            } else {
              if (Test-Path -Path "C:/Windows/System32/libcrypto-1_1-x64.dll") {
                $libcrypto = "C:/Windows/System32/libcrypto-1_1-x64.dll"
              }
            }
          } else {
            if ("${{ matrix.arch }}" -eq "x86") {
              if (Test-Path -Path "C:/Windows/System32/libcrypto-1_1-x64.dll") {
                $libcrypto = "C:/Windows/System32/libcrypto-1_1-x64.dll"
              } else {
                if (Test-Path -Path "C:/Windows/System32/libcrypto-1_1.dll") {
                  $libcrypto = "C:/Windows/System32/libcrypto-1_1.dll"
                }
              }
            }
          }
          if ($libcrypto -ne $null) {
            Copy-Item -Path $libcrypto -Destination "./bin"
          }

      - name: Upload bin directory
        if: env.SKIP != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-v${{ env.VERSION }}-windows-${{ matrix.arch }}
          path: C:\aseprite\build\bin

  release:
    name: Publish GitHub Release
    needs: [precheck, build]
    if: needs.precheck.outputs.exists != 'true'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.precheck.outputs.version }}
    steps:
      - name: Download x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: aseprite-v${{ env.VERSION }}-windows-x64
          path: ./x64

      - name: Download x86 artifact
        uses: actions/download-artifact@v4
        with:
          name: aseprite-v${{ env.VERSION }}-windows-x86
          path: ./x86

      - name: Fetch Aseprite changelog
        id: fetch_changelog
        run: |
          echo "Fetching changelog for v$VERSION"
          # Try to get the release by tag; fall back to empty body if not found
          RESPONSE=$(curl -sSL -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/aseprite/aseprite/releases/tags/v$VERSION || echo '{}')
          BODY=$(echo "$RESPONSE" | jq -r '.body // ""')
          echo "::set-output name=body::$BODY"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          body: ${{ steps.fetch_changelog.outputs.body }}
          draft: false
          prerelease: false

      - name: Upload x64 asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./x64
          asset_name: aseprite-v${{ env.VERSION }}-windows-x64
          asset_content_type: application/octet-stream

      - name: Upload x86 asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./x86
          asset_name: aseprite-v${{ env.VERSION }}-windows-x86
          asset_content_type: application/octet-stream
